{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","default","sortField","setSortField","reverseField","setReverseField","visibleGoods","goods","sortedGoods","sort","good1","good2","alphabetically","localeCompare","byLength","reverse","getSortedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,4EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,0BAAAA,E,kBAAAA,E,YAAAA,M,KAsCE,IAAME,EAAM,WACjB,MAAkCC,mBAASH,EAASI,SAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCH,oBAAS,GAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KACMC,EA9BR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,aAEPI,EAAW,YAAOD,GAoBxB,OAlBIL,GACFM,EAAYC,MAAK,SAACC,EAAOC,GACvB,OAAQT,GACN,KAAKL,EAASe,eACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKd,EAASiB,SACZ,OAAOJ,EAAMb,EAASiB,UAClBH,EAAMd,EAASiB,UACrB,QACE,OAAO,MAKXV,GACFI,EAAYO,UAGPP,EAMcQ,CACnBlB,EACA,CAAEI,YAAWE,iBAGf,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UAAW,CACjC,WAAYjB,IAAcL,EAASe,iBAErCQ,QAAS,kBAAMjB,EAAaN,EAASe,iBALvC,iCAUA,wBACEM,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYjB,IAAcL,EAASiB,WAErCM,QAAS,kBAAMjB,EAAaN,EAASiB,WALvC,4BAUA,wBACEI,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,YAA6B,IAAjBf,IAEdgB,QAAS,kBAAMf,GAAiBD,IALlC,sBAUEF,GAAaE,IACb,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPjB,EAAaN,EAASI,SACtBI,GAAgB,IALpB,sBAaJ,6BACGC,EAAae,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YChHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.417a1337.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport { useState } from 'react';\nimport cn from 'classnames';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  alphabetically = 'alphabet',\n  byLength = 'length',\n  default = '',\n}\n\ntype SortOptions = {\n  sortField: SortType,\n  reverseField: boolean,\n};\n\nfunction getSortedGoods(\n  goods: string[],\n  { sortField, reverseField }: SortOptions,\n) {\n  const sortedGoods = [...goods];\n\n  if (sortField) {\n    sortedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.alphabetically:\n          return good1.localeCompare(good2);\n        case SortType.byLength:\n          return good1[SortType.byLength]\n            - good2[SortType.byLength];\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseField) {\n    sortedGoods.reverse();\n  }\n\n  return sortedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState(SortType.default);\n  const [reverseField, setReverseField] = useState(false);\n  const visibleGoods = getSortedGoods(\n    goodsFromServer,\n    { sortField, reverseField },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortField !== SortType.alphabetically,\n          })}\n          onClick={() => setSortField(SortType.alphabetically)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortField !== SortType.byLength,\n          })}\n          onClick={() => setSortField(SortType.byLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': reverseField === false,\n          })}\n          onClick={() => setReverseField(!reverseField)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverseField) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField(SortType.default);\n              setReverseField(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}